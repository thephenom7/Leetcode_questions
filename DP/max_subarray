class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int ma=0,curr=0,ind=-1,n=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]<0)
                n++;
            if((ma+nums[i])<0)
            {
                curr=0;
                continue;
            }
            curr=curr+nums[i];
            ma=max(curr,ma);
            if(ma==curr)ind=i;    
        }
        cout<<n<<nums.size();
        if(n==nums.size())
        {return(min(nums.begin(),nums.end()));}
        else{
        return ma;}
        
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        
        int ret = Solution().maxSubArray(nums);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
